@page "/weather"
@inject ILogger<Weather> Logger 
@inject IJSRuntime JS
@attribute [StreamRendering]


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table  @ref="weatherTable" class="table sortable">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private ElementReference weatherTable;



    protected override void OnInitialized()
    {
        Logger.LogInformation("OnInitialized: ");
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync1: ");

        // Simulate asynchronous loading to demonstrate streaming rendering
        //await Task.Delay(500);

        Logger.LogInformation("OnInitializedAsync2: ");

        
        // Do your initialization
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        //StateHasChanged();

        Logger.LogInformation("OnInitializedAsync3: ");

        // Make sure table is built before first render
        //await Task.Delay(500);

        Logger.LogInformation("OnInitializedAsync4: ");

    }

        protected override void OnAfterRender (bool firstRender)
    {
        Logger.LogInformation("OnAfterRender: firstRender = {FirstRender}", firstRender);
    }

    //This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated.
    //https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.componentbase.onafterrender?view=aspnetcore-8.0
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync: firstRender = {FirstRender}", firstRender);

        if (firstRender)
        {
            //not being called, only works after F5 in which case built in sorttable.js corrects table to be sortable
            await JS.InvokeVoidAsync("sorttable.makeSortable", weatherTable);
        }

        Logger.LogInformation("OnAfterRenderAsync: return");

    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("OnParametersSet: ");
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation("OnParametersSetAsync1:  ");
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
