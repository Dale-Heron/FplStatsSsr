@page "/fpl"
@inject ILogger<Fpl> Logger 
@inject IJSRuntime JS
@inject HttpClient Http
@attribute [StreamRendering]


<PageTitle>Fpl</PageTitle>

<h1>Fpl</h1>

<p>This component demonstrates showing data.</p>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table  @ref="playerTable" class="table sortable">
        <thead>
            <tr>
                <th>First name</th>
                <th>Second name</th>
                <th>Total points</th>
                <th>Price</th>
                <th>Position</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in players)
            {
                <tr>
                    <td>@player.FirstName</td>
                    <td>@player.SecondName</td>
                    <td>@player.TotalPoints</td>
                    <td>@player.Price</td>
                    <td>@player.Position</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //private String url = "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/cleaned_players.csv";
    private String url = "https://fantasy.premierleague.com/api/bootstrap-static/";
    private FplPlayer[]? players;
    private ElementReference playerTable;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync1: ");

        var topLevel = await Http.GetFromJsonAsync<Dictionary<String, JsonElement>>(url);

        if( topLevel != null){
            players = JsonSerializer.Deserialize<FplPlayer[]>(topLevel["elements"]);
        }
        else{
            Logger.LogError("GetFromJsonAsync: returned null");
        }
        
        // Simulate asynchronous loading to demonstrate streaming rendering
        //await Task.Delay(500);

        Logger.LogInformation("OnInitializedAsync2: ");
    }

    //This method is not invoked during prerendering or server-side rendering, because those processes are not attached to any live browser DOM and are already complete before the DOM is updated.
    //https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.componentbase.onafterrender?view=aspnetcore-8.0
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync: firstRender = {FirstRender}", firstRender);

        if (firstRender)
        {
            //not being called, only works after F5 in which case built in sorttable.js corrects table to be sortable
            await JS.InvokeVoidAsync("sorttable.makeSortable", playerTable);
        }

        Logger.LogInformation("OnAfterRenderAsync: return");

    }

    private class FplPlayer
    {
        [JsonPropertyName("first_name")]
        public required string FirstName { get; set; }

        [JsonPropertyName("second_name")]
        public required string SecondName { get; set; }

        [JsonPropertyName("total_points")]
        public required int TotalPoints { get; set; }

        [JsonPropertyName("now_cost")]
        public required int Price { get; set; }

        [JsonPropertyName("element_type")]
        public required int Position { get; set; }


        //public DateOnly Date { get; set; }
        //public int TemperatureC { get; set; }
        //public string? Summary { get; set; }
        //public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
